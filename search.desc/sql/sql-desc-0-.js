searchState.loadedDescShard("sql", 0, "Aggregate function with filter\n<code>ALL</code> operation e.g. <code>foo &gt; ALL(bar)</code>, comparison operator is …\nAnd, e.g. <code>a AND b</code>\n<code>ANY</code> operation e.g. <code>foo &gt; ANY(bar)</code>, comparison operator is …\nArrays\nAn array expression e.g. <code>ARRAY[1, 2]</code>\nThe <code>ARRAY_AGG</code> function <code>SELECT ARRAY_AGG(... ORDER BY ...)</code>\nAn array index expression e.g. <code>(ARRAY[1, 2])[1]</code> or …\nAn array subquery constructor, e.g. …\nAT a timestamp to a different timezone e.g. …\n<code>&lt;expr&gt; [ NOT ] BETWEEN &lt;low&gt; AND &lt;high&gt;</code>\nThis is alias for <code>BigNumeric</code> type used in BigQuery\nBig integer with optional display width e.g. BIGINT or …\nBigNumeric type used in BigQuery\nFixed-length binary type with optional length e.g.  …\nBinary operation e.g. <code>1 + 1</code> or <code>foo &gt; bar</code>\nBinary operators\nBitwise and, e.g. <code>a &amp; b</code>\nBitwise or, e.g. <code>a | b</code>\nBitwise XOR, e.g. <code>a ^ b</code>\nLarge binary object with optional length e.g. BLOB, …\nBool as alias for Boolean in postgresql\nBoolean\nBoolean value true or false\nType returned when the recursion returns early.\nType returned when the recursion returns early.\nBytea\nVariable-length binary data with optional length.\n…\n<code>CAST</code> an expression to a different data type e.g. …\nFixed-length char type e.g. CHAR(10)\nLarge character object with optional length e.g. CHAR …\nChar varying type e.g. CHAR VARYING(10)\nFixed-length character type e.g. CHARACTER(10)\nLarge character object with optional length e.g. CHARACTER …\nCharacter varying type e.g. CHARACTER VARYING(10)\n<code>[ CONSTRAINT &lt;name&gt; ] CHECK (&lt;expr&gt;)</code>\n<code>CHECK (&lt;expr&gt;)</code>\nLarge character object with optional length e.g. CLOB, …\n<code>expr COLLATE collation</code>\nSQL column definition\n<code>ColumnOption</code>s are modifiers that follow a column …\nAn optionally-named <code>ColumnOption</code>: …\nCompositeAccess (postgres) eg: SELECT (information_schema._…\nMulti-part identifier, e.g. <code>table_alias.column</code> or …\nCONVERT a value to a different data type or character …\nThe <code>CUBE</code> expr.\nCustom type such as enums\nSupport for custom operators (built by parsers outside …\nSQL data types\nDate\nDatetime with optional time precision e.g. MySQL.\nDec type with optional precision and scale e.g. DEC(10,2), …\nDecimal type with optional precision and scale e.g. …\n<code>DEFAULT &lt;restricted-expr&gt;</code>\nDialect-specific options, such as:\n<code>DuckDB</code> specific <code>Struct</code> literal expression 1\nDivide, e.g. <code>a / b</code>\nDouble\nDouble PRECISION e.g. standard, postgresql\nB“string value“\nInteger division operator <code>//</code> in DuckDB\nEnums\nEqual, e.g. <code>a = b</code>\ne’string value’ (postgres extension) See Postgres docs …\nAn exists expression <code>[ NOT ] EXISTS(SELECT ...)</code>, used in …\nAn SQL expression of any type.\nExtract a field from a timestamp e.g. …\nFloating point with optional precision e.g. FLOAT(8)\nFloat4 as alias for Real in postgresql\nFloating point in bigquery\nFloat8 as alias for Double in postgresql\nA referential integrity constraint (…\nA referential integrity constraint (…\nMySQLs fulltext definition. Since the <code>SPATIAL</code> definition …\nA function call\nScalar function call e.g. <code>LEFT(foo, 5)</code>\n<code>Generated</code>s are modifiers that follow a column definition …\nThe <code>GROUPING SETS</code> expr.\nGreater than, e.g. <code>a &gt; b</code>\nGreater equal, e.g. <code>a &gt;= b</code>\nX’hex value’\n<code>ILIKE</code> (case-insensitive <code>LIKE</code>)\nAn identifier, decomposed into its value or character data …\nIdentifier e.g. table name or column name\n<code>[ NOT ] IN (val1, val2, ...)</code>\n<code>[ NOT ] IN (SELECT ...)</code>\n<code>[ NOT ] IN UNNEST(array_expression)</code>\nMySQLs index definition for index creation. Not present on …\nInt with optional display width e.g. INT or INT(11)\nInt2 as alias for SmallInt in postgresql Note: Int2 mean 2 …\nInt4 as alias for Integer in postgresql Note: Int4 mean 4 …\nInteger type in bigquery\nInt8 as alias for Bigint in postgresql Note: Int8 mean 8 …\nInteger with optional display width e.g. INTEGER or …\nInterval\nAn interval expression e.g. <code>INTERVAL &#39;1&#39; YEAR</code>\n…\n<code>IS DISTINCT FROM</code> operator\n<code>IS FALSE</code> operator\n<code>IS NOT DISTINCT FROM</code> operator\n<code>IS NOT FALSE</code> operator\n<code>IS NOT NULL</code> operator\n<code>IS NOT TRUE</code> operator\n<code>IS NOT UNKNOWN</code> operator\n<code>IS NULL</code> operator\n<code>IS TRUE</code> operator\n<code>IS UNKNOWN</code> operator\nJSON type\nBinary JSON type\nJSON access (postgres)  eg: data-&gt;‘tags’\n<code>[NOT] LIKE &lt;pattern&gt; [ESCAPE &lt;escape_character&gt;]</code>\nThe <code>LISTAGG</code> function …\nLess than, e.g. <code>a &lt; b</code>\nLess equal, e.g. <code>a &lt;= b</code>\nAccess a map-like object by field (e.g. <code>column[&#39;field&#39;]</code> or …\n<code>MySQL</code> specific text search function (1).\nMySQL medium integer (1) with optional display width e.g. …\nMinus, e.g. <code>a - b</code>\nModulo, e.g. <code>a % b</code>\nMultiply, e.g. <code>a * b</code>\nMySQL <code>DIV</code> integer division\n<code>BigQuery</code> specific: An named expression in a typeless …\nN’string value’\nNested expression e.g. <code>(foo &gt; bar)</code> or <code>(1)</code>\nNo information about time zone. E.g., TIMESTAMP\nNot equal, e.g. <code>a &lt;&gt; b</code>\n<code>NOT NULL</code>\n<code>NULL</code>\n<code>NULL</code> value\nNumeric literal\nNumeric type with optional precision and scale e.g. …\nVariable-length character type e.g. NVARCHAR(10)\nA name of a table, view, custom type, etc., possibly …\nBigQuery specific: Explicit column options in a view 1 or …\nOr, e.g. <code>a OR b</code>\nSome dialects support an older syntax for outer joins …\nBitwise shift left, e.g. <code>a &lt;&lt; b</code> (PostgreSQL-specific)\nBitwise shift right, e.g. <code>a &gt;&gt; b</code> (PostgreSQL-specific)\nBitwise XOR, e.g. <code>a # b</code> (PostgreSQL-specific)\nPostgreSQL-specific custom operator.\nExponent, e.g. <code>a ^ b</code> (PostgreSQL-specific)\nString matches pattern (case insensitively), e.g. <code>a ~~* b</code> …\nString matches pattern (case sensitively), e.g. <code>a ~~ b</code> …\nString does not match pattern (case insensitively), e.g. …\nString does not match pattern (case sensitively), e.g. …\nOverlap operator, e.g. <code>a &amp;&amp; b</code> (PostgreSQL-specific)\nString matches regular expression (case insensitively), …\nString matches regular expression (case sensitively), e.g. …\nString does not match regular expression (case …\nString does not match regular expression (case …\nString “starts with”, eg: <code>a ^@ b</code> (PostgreSQL-specific)\n<code>?</code> or <code>$</code> Prepared statement arg placeholder\nPlus, e.g. <code>a + b</code>\nMySQL definition for <code>PRIMARY KEY</code> constraints statements:\\\nQualified wildcard, e.g. <code>alias.*</code> or <code>schema.table.*</code>. (Same …\nQualified wildcard, e.g. <code>alias.*</code> or <code>schema.table.*</code>.\nMySQL: RLIKE regex or REGEXP regex\nR’string value’ or r’string value’ or r“string …\nFloating point e.g. REAL\nRegclass used in postgresql serial\nThe <code>ROLLUP</code> expr.\n<code>SAFE_CAST</code> an expression to a different data type e.g. …\nSet\nSIMILAR TO regex\nB’string value’\n‘string value’\nSmall integer with optional display width e.g. SMALLINT or …\nSpaceship, e.g. <code>a &lt;=&gt; b</code>\nString with optional length.\nString/Array Concat operator, e.g. <code>a || b</code>\nStruct\n<code>BigQuery</code> specific <code>Struct</code> literal expression 1 Syntax:\nA parenthesized subquery <code>(SELECT ...)</code>, used in expression …\nA table-level constraint, specified in a <code>CREATE TABLE</code> or an\nText\nTime with optional time precision and time zone …\nTimestamp with optional time precision and time zone …\nTimestamp and Time data types information about TimeZone …\nTiny integer with optional display width e.g. TINYINT or …\n<code>TRY_CAST</code> an expression to a different data type e.g. …\nROW / TUPLE a single value, such as <code>SELECT (1, 2)</code>\nA constant of form <code>&lt;data_type&gt; &#39;value&#39;</code>. This can represent …\nPostgresql specific <code>WITH TIME ZONE</code> formatting, for both …\nAdd support of snowflake field:key - key should be a value\nUnary operation e.g. <code>NOT foo</code>\nMySQL definition for <code>UNIQUE</code> constraints statements:\\\n<code>{ PRIMARY KEY | UNIQUE } [&lt;constraint_characteristics&gt;]</code>\nUnsigned big integer with optional display width e.g. …\nUnsigned int with optional display width e.g. INT UNSIGNED …\nUnsigned Int2 with optional display width e.g. INT2 …\nUnsigned int4 with optional display width e.g. INT4 …\nUnsigned Int8 with optional display width e.g. INT8 …\nUnsigned integer with optional display width e.g. INTGER …\nUnsigned medium integer (1) with optional display width …\nUnsigned small integer with optional display width e.g. …\nUnsigned tiny integer with optional display width e.g. …\nNo type specified - only used with <code>SQLiteDialect</code>, from …\nUuid type\nPrimitive SQL values such as number and string\nA literal value, such as string, number, date or NULL\nVariable-length binary with optional length type e.g. …\nVariable-length character type e.g. VARCHAR(10)\nA type that can be visited by a <code>Visitor</code>. See <code>Visitor</code> for …\nA type that can be visited by a <code>VisitorMut</code>. See <code>VisitorMut</code> …\nA visitor that can be used to walk an AST tree.\nA visitor that can be used to mutate an AST tree.\nAn unqualified <code>*</code>\nTemporal type ‘WITH TIME ZONE’. E.g., TIMESTAMP WITH …\nTemporal type ‘WITHOUT TIME ZONE’. E.g., TIME WITHOUT …\nXOR, e.g. <code>a XOR b</code>\ne.g. <code>x &gt; 5</code> in <code>COUNT(x) FILTER (WHERE x &gt; 5)</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new identifier with the given value and no quotes.\nInvoked for any expressions that appear in the AST\nInvoked for any expressions that appear in the AST\nInvoked for any queries that appear in the AST after …\nInvoked for any queries that appear in the AST after …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any statements that appear in the AST after …\nInvoked for any statements that appear in the AST after …\nInvoked for any table factors that appear in the AST after …\nInvoked for any table factors that appear in the AST after …\nInvoked for any expressions that appear in the AST before …\nInvoked for any expressions that appear in the AST before …\nInvoked for any queries that appear in the AST before …\nInvoked for any queries that appear in the AST before …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any relations (e.g. tables) that appear in the …\nInvoked for any statements that appear in the AST before …\nInvoked for any statements that appear in the AST before …\nInvoked for any table factors that appear in the AST …\nInvoked for any table factors that appear in the AST …\nThe starting quote if any. Valid quote characters are the …\nThe value of the identifier without quotes.\ncheck this value is a valid duration string\nInvokes the provided closure iteratively with a mutable …\nInvokes the provided closure on all statements (e.g. <code>SELECT</code>…\nCreate a new quoted identifier with the given quote and …\nfalse if ‘GENERATED ALWAYS’ is skipped (option starts …\nThe target character encoding\n<code>(&lt;col&gt;, &lt;col&gt;, ...)</code>.\nThe target data type\nThe expression to convert\nStruct field definitions.\n<code>&lt;expr&gt;</code>.\n<code>&lt;search modifier&gt;</code>\nfalse if the expression is represented using the …\nwhether the target comes before the expr (MSSQL syntax)\nStruct values.\nIdentifiers of the columns that are unique.\nIdentifiers of the columns that form the primary key.\nReferred column identifier list.\nReferred column identifier list.\nWhether this index starts with KEY (true) or INDEX …\nWhether this is a <code>FULLTEXT</code> (true) or <code>SPATIAL</code> (false) …\nIndex name\nIndex name\nOptional <code>USING</code> of index type statement before columns.\nOptional <code>USING</code> of index type statement before columns.\nOptional index type.\nWhether the type is followed by the keyword <code>KEY</code>, <code>INDEX</code>, or …\nWhether the type is followed by the keyword <code>KEY</code>, <code>INDEX</code>, or …\nConstraint name.\nConstraint name.\nIndex name.\nOptional index name.\nEncapsulates the differences between SQL implementations.\nA permissive, general purpose <code>Dialect</code>, which parses a wide …\nGreptimeDb dialect\nA <code>Dialect</code> for MySQL\nA <code>Dialect</code> for PostgreSQL\nReturns true if the dialect has a CONVERT function which …\nDetermine the <code>TypeId</code> of this dialect.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDialect-specific precedence override\nReturn the character used to quote identifiers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermine if a character starts a quoted identifier. The …\nDetermine if a character is a valid unquoted identifier …\nDetermine if a character is a valid start character for an …\nDetermine if quoted characters are proper for identifier\nDialect-specific infix parser override\nDialect-specific prefix parser override\nDialect-specific statement parser override\nDoes the dialect support <code>FILTER (WHERE expr)</code> for aggregate …\nReturns true if the dialects supports …\nReturns true if the dialect supports <code>(NOT) IN ()</code> …\nReturns true if the dialect supports named arguments of …\nReturns true if the dialect supports …\nReturns true if the dialect supports …\nSNAFU context selector for the <code>Error::ColumnTypeMismatch</code> …\nSNAFU context selector for the <code>Error::ConvertSqlValue</code> …\nSNAFU context selector for the <code>Error::ConvertToDfStatement</code> …\nSNAFU context selector for the <code>Error::ConvertToGrpcDataType</code>…\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::ConvertValue</code> variant\nSNAFU context selector for the <code>Error::Datatype</code> variant\nContains the error value\nSQL parser errors.\nSNAFU context selector for the <code>Error::InvalidCast</code> variant\nSNAFU context selector for the <code>Error::InvalidColumnOption</code> …\nSNAFU context selector for the <code>Error::InvalidDatabaseName</code> …\nSNAFU context selector for the <code>Error::InvalidDatabaseOption</code>…\nSNAFU context selector for the <code>Error::InvalidDefault</code> …\nSNAFU context selector for the <code>Error::InvalidFlowName</code> …\nSNAFU context selector for the <code>Error::InvalidInterval</code> …\nSNAFU context selector for the <code>Error::InvalidSql</code> variant\nSNAFU context selector for the <code>Error::InvalidSqlValue</code> …\nSNAFU context selector for the <code>Error::InvalidTableName</code> …\nSNAFU context selector for the <code>Error::InvalidTableOption</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InvalidTimeIndex</code> …\nSNAFU context selector for the <code>Error::InvalidUnaryOp</code> …\nSNAFU context selector for the <code>Error::MissingTimeIndex</code> …\nContains the success value\nSNAFU context selector for the <code>Error::ParseSqlValue</code> variant\nSNAFU context selector for the <code>Error::PermissionDenied</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::SetFulltextOption</code> …\nSNAFU context selector for the <code>Error::Simplification</code> …\nSNAFU context selector for the <code>Error::SqlTypeNotSupported</code> …\nSNAFU context selector for the <code>Error::Syntax</code> variant\nSNAFU context selector for the <code>Error::TQLSyntax</code> variant\nSNAFU context selector for the <code>Error::TimestampOverflow</code> …\nSNAFU context selector for the <code>Error::Unexpected</code> variant\nSNAFU context selector for the <code>Error::UnexpectedToken</code> …\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::Unsupported</code> variant\nSNAFU context selector for the <code>Error::UnsupportedUnaryOp</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSQL Parser options.\nGrepTime SQL parser context, a simple wrapper for …\nCanonicalize the identifier to lowercase if it’s not …\nLike [canonicalize_identifier] but for ObjectName.\nParses SQL with given dialect\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new ParserContext.\nParse <code>admin function(arg1, arg2, ...)</code> or <code>admin function</code> …\nParse the column name and check if it’s valid.\nParse a comma-separated list wrapped by “()”, and of …\n“CREATE FLOW” clause\nParse <code>CREAVE VIEW</code> statement.\nParses MySQL style ‘PREPARE stmt_name’ into a …\nSimply a shortcut for sqlparser’s same name method …\nParses MySQL style ‘DEALLOCATE stmt_name’ into a …\nParses MySQL style ‘EXECUTE stmt_name USING param_list’…\nParses MySQL style ‘EXECUTE stmt_name USING param_list’…\nParses MySQL style ‘PREPARE stmt_name FROM stmt’ into …\nParses MySQL style ‘PREPARE stmt_name FROM stmt’ into …\nSimply a shortcut for sqlparser’s same name method …\n“PARTITION ON COLUMNS (…)” clause\nParses select and it’s variants.\nParses SHOW statements todo(hl) support <code>show settings</code>/…\nParse SHOW CREATE TABLE statement\nParses <code>SHOW DATABASES</code> statement.\nParses parser context to a set of statements.\nTry to parse and consume a string, number or word token. …\nParses the set of valid formats\nParses parser context to Query.\nRaises an “unsupported statement” error.\nParses a comma separated list of string literals.\nParses a string literal and an optional string literal …\nEnsure all exprs are binary expr and all the columns are …\nCheck if the expr is a binary expr, an ident or a literal …\nEnsure that all columns used in “PARTITION ON COLUMNS” …\nSNAFU context selector for the …\nSNAFU context selector for the <code>TQLError::Evaluation</code> variant\nSNAFU context selector for the <code>TQLError::Parser</code> variant\nTQL parser &amp; evaluation errors.\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper struct for <code>parser_expr_to_scalar_value</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert a parser expression to a scalar value. This …\nOptions hashmap.\nCreate a <code>ColumnSchema</code> from <code>Column</code>.\nReturn true when the <code>ColumnDef</code> options contain primary key\nConvert <code>ColumnDef</code> in sqlparser to <code>ColumnDef</code> in gRPC proto.\nConvert a sql value into datatype’s value\nTransform statements by rules\n<code>ADMIN</code> statement to execute some administration commands.\nRun a admin function.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ADD [ COLUMN ] &lt;column_def&gt; [location]</code>\n<code>ADD &lt;table_constraint&gt;</code>\n<code>DROP COLUMN &lt;name&gt;</code>\n<code>MODIFY &lt;column_name&gt; [target_type]</code>\n<code>RENAME &lt;new_table_name&gt;</code>\n<code>MODIFY COLUMN &lt;column_name&gt; SET FULLTEXT [WITH &lt;options&gt;]</code>\n<code>SET &lt;table attrs key&gt; = &lt;table attr value&gt;</code>\n<code>MODIFY COLUMN &lt;column_name&gt; UNSET FULLTEXT</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCopy tbl [To|From] ‘location’.\nColumn definition in <code>CREATE TABLE</code> statement.\nColumn extensions for greptimedb dialect.\nCreate SQL view statement.\nInverted index constraint.\nPrimary key constraint.\nTable constraint for create table statement.\nTime index constraint.\n<code>ColumnDef</code> from <code>sqlparser::ast</code>\nAn optional list of names to be used for columns of the …\nComment string\n<code>EXPIRE AFTER</code> Duration in second as <code>i64</code>\nColumn extensions for greptimedb dialect.\nFlow name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFulltext options.\nCreate if not exists\nCreate if not exists\nCreate if not exist\nCreate VIEW only when it doesn’t exists\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTable name\nTable name\nView name\nCreates a statement for <code>CREATE DATABASE</code>\nTable options in <code>WITH</code>. All keys are lowercase.\nTable options in <code>WITH</code>. All keys are lowercase.\nWhether to replace existing task\nWhether to replace existing VIEW\nSQL statement\nThe clause after <code>As</code> that defines the VIEW. Can only be …\nset quotes to all Idents from column list\nOutput (sink) table name\nThe table that is designated to be imitated by <code>Like</code>\nTable name\nVector options.\nRepresents a CLOSE cursor statement\nRepresents a DECLARE CURSOR statement\nRepresents a FETCH FROM cursor statement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSQL structure for <code>DESCRIBE TABLE</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a statement for <code>DESCRIBE TABLE</code>\nDROP DATABASE statement.\nDROP FLOW statement.\nDROP TABLE statement.\n<code>DROP VIEW</code> statement.\nReturn the <code>drop_if_exists</code>.\ndrop table if exists\ndrop table if exists\ndrop flow if exists\nReturns the flow name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a statement for <code>DROP TABLE</code>\nCreates a statement for <code>DROP DATABASE</code>\nCreates a statement for <code>DROP DATABASE</code>\nExplain statement.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true when the insert statement can extract literal …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExtracts the literal insert statement body if possible\nOptions hashmap.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery statement instance.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSET variables statement.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe SQL <code>SHOW COLUMNS</code> statement\nSQL structure for <code>SHOW CREATE DATABASE</code>.\nSQL structure for <code>SHOW CREATE FLOW</code>.\nSQL structure for <code>SHOW CREATE TABLE</code>.\nSQL structure for <code>SHOW CREATE VIEW</code>.\nSQL structure for <code>SHOW DATABASES</code>.\nSQL structure for <code>SHOW FLOWS</code>.\nThe SQL <code>SHOW INDEX</code> statement\nShow kind for SQL expressions like <code>SHOW DATABASE</code> or …\nSQL structure for “SHOW STATUS”\nSQL structure for <code>SHOW TABLE STATUS</code>.\nSQL structure for <code>SHOW TABLES</code>.\nSQL structure for <code>SHOW VARIABLES xxx</code>.\nSQL structure for <code>SHOW VIEWS</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a statement for <code>SHOW DATABASES</code>\nALTER DATABASE\nALTER TABLE\nCREATE TABLE\nComment hints from SQL. It’ll be enabled when using …\nSHOW FLOWS\nTokens parsed by <code>DFParser</code> are converted into these values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTQL ANALYZE [VERBOSE] (, , , [lookback])  executes the …\nTQL EVAL (, , , [lookback]) \nTQL EXPLAIN [VERBOSE] [, , , [lookback]]  doesn’t …\nIntermediate structure used to unify parameter mappings …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransformRule registry\nTransform rule to transform statement or expr\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTransform statements by rules\nVisit an Expr\nVisit a Statement\n‘INTERVAL’ abbreviation transformer\nMatches either one or more digits <code>(\\d+)</code> or one or more …\nChecks if the provided string starts as ISO_8601 format …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNormalizes an interval expression string into the …\nApplies transform rule for <code>Interval</code> type by extending the …\nSQL data type alias transformer:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTRUNCATE TABLE statement.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a statement for <code>TRUNCATE TABLE</code>\nWalk through a Query and extract all the tables referenced …\nHelper function for extract_tables_from_query.\nFormat an ObjectName without any quote of its idents.\nHelper function for extract_tables_from_query.")